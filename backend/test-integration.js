#!/usr/bin/env node

const axios = require('axios');

const API_BASE = 'http://localhost:3000/api';

async function testIntegration() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Swiss Ephemeris...\n');

  try {
    // 1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    console.log('1Ô∏è‚É£ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...');
    const loginResponse = await axios.post(`${API_BASE}/auth/login`, {
      email: 'test@astralink.com',
      password: 'password123'
    });
    
    console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
    console.log(`   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${loginResponse.data.user.name}`);
    console.log(`   –¢–æ–∫–µ–Ω: ${loginResponse.data.token.substring(0, 20)}...`);
    
    const token = loginResponse.data.token;
    const headers = { Authorization: `Bearer ${token}` };

    // 2. –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã
    console.log('\n2Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã...');
    const chartResponse = await axios.post(`${API_BASE}/chart/natal`, { data: {} }, { headers });
    
    console.log('‚úÖ –ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞');
    console.log(`   ID –∫–∞—Ä—Ç—ã: ${chartResponse.data.id}`);
    console.log(`   –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: ${chartResponse.data.data.birthDate}`);
    console.log(`   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–ª–∞–Ω–µ—Ç: ${Object.keys(chartResponse.data.data.planets).length}`);
    console.log(`   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Å–ø–µ–∫—Ç–æ–≤: ${chartResponse.data.data.aspects.length}`);

    // 3. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–ª–∞–Ω–µ—Ç—ã
    console.log('\nü™ê –ü–æ–∑–∏—Ü–∏–∏ –ø–ª–∞–Ω–µ—Ç:');
    Object.entries(chartResponse.data.data.planets).forEach(([planet, data]) => {
      console.log(`   ${planet}: ${data.sign} ${data.degree.toFixed(1)}¬∞`);
    });

    // 4. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∏–ª—å–Ω–µ–π—à–∏–µ –∞—Å–ø–µ–∫—Ç—ã
    console.log('\n‚≠ê –°–∏–ª—å–Ω–µ–π—à–∏–µ –∞—Å–ø–µ–∫—Ç—ã:');
    const strongAspects = chartResponse.data.data.aspects
      .sort((a, b) => (b.strength || 0) - (a.strength || 0))
      .slice(0, 5);
    
    strongAspects.forEach((aspect, index) => {
      console.log(`   ${index + 1}. ${aspect.planetA} ${aspect.aspect} ${aspect.planetB} (—Å–∏–ª–∞: ${(aspect.strength * 100).toFixed(1)}%)`);
    });

    // 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã
    console.log('\n3Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–∞—Ä—Ç—ã...');
    const getChartResponse = await axios.get(`${API_BASE}/chart/natal`, { headers });
    console.log('‚úÖ –ö–∞—Ä—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');

    // 6. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∏—Ç—ã (–º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å)
    try {
      console.log('\n4Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∏—Ç–æ–≤...');
      const from = new Date().toISOString().split('T')[0];
      const to = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0];
      const transitsResponse = await axios.get(`${API_BASE}/chart/transits?from=${from}&to=${to}`, { headers });
      console.log('‚úÖ –¢—Ä–∞–Ω–∑–∏—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã');
      console.log(`   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∏—Ç–æ–≤: ${transitsResponse.data.transits?.length || 0}`);
    } catch (error) {
      console.log('‚ö†Ô∏è –¢—Ä–∞–Ω–∑–∏—Ç—ã –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã');
    }

    console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! Swiss Ephemeris —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.');
    
  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞:', error.response?.data || error.message);
    process.exit(1);
  }
}

testIntegration();
